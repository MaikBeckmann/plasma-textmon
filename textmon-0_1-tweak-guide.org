#+Title: Hack your TextMon(-0.1)
#+Author: Maik Beckmann &lt;beckmann.maik@googlemail.com&gt;
#+Language: en
#+Style: <link rel="stylesheet" type="text/css" href="org-mode.css"/>

* Introdution
A number of examples on how to alter TextMon-0.1 are presented.  I'll assume
you know what is explained in the prelude (TODO link here).

** The next thing
The actual point of TextMon is to give you an hands-on hacking entry point to
writing plasma applets.  While starting to document TextMon I've learned a lot
new things, which aren't reflected in TextMon-0.1 .  There are new TextMon and
foremost much simpler flavors TextMon to come, like
 - TextMonCpu
 - TextMonMem
 - TextMonWlan
 - TextMonSda
etc.  Eventually I'll come back to this original applet.  The code will most
like be much simper, easier to understand and alter.  For the time being, this
document will server the need to tweak the current TextMon-0.1.

* Changing the font
The CSS stylesheet that defines the font appearance is located in line 10
to 13.  If
#+begin_src js
  // Font properties
  var styleSheet = { "font-family": "Liberation Mono",
                     "font-style": "normal",
                     "font-size": "10px",
                     "color": "white" };
#+end_src
is changed to use the default monospace font and a bigger font size
#+begin_src js
  // Font properties
  var styleSheet = { "font-family": "Monospace",
                     "font-style": "normal",
                     "font-size": "24px",
                     "color": "white" };
#+end_src
we get
#+caption: Bigger font
[[file:images/textmon-0.1/bigger_font.png]]

* Changing value decoration
The code that arranges the labels is at the lines 141-146
#+begin_src js
  for(var i in labelNames) {
    var name = labelNames[i]
    layout.addItem(separator("{" + name + ":"));
    layout.addItem(labels[name]);
    layout.addItem(separator("}"));
  }
#+end_src
If we change remove the device name
#+begin_src js
  for(var i in labelNames) {
    var name = labelNames[i]
    layout.addItem(separator("{"));
    layout.addItem(labels[name]);
    layout.addItem(separator("}"));
  }
#+end_src
we'll get
#+caption: Without device names
[[file:images/textmon-0.1/without_device_names.png]]
Or you do something entirely different
#+begin_src js
  layout.addItem(labels.cpu);
  layout.addItem(separator("{"));
  layout.addItem(labels.mem);
  layout.addItem(separator("}("));
  layout.addItem(labels.wlan);
  layout.addItem(separator(")["));
  layout.addItem(labels.sda);
  layout.addItem(separator("]"));
#+end_src
#+caption: Random decoration
[[file:images/textmon-0.1/random_decoration.png]]

* Removing cpu or mem entry
We'll remove the /cpu/ entry from textmon.  This doesn't make much sense, but I
want you to know how to do it anyways.

Comment out or remove line 21:
#+begin_src js
  var sourceNames = (function () {
    var ret = {}

    // ret["cpu"] = "cpu/system/TotalLoad";
    ret["mem"] = "mem/physical/application";
    ...
#+end_src

Remove "cpu" from line 35:
#+begin_src js
  var labelNames = ["mem", "wlan", "sda"];
#+end_src

Comment out or remove line 41:
#+begin_src js
var sourceLabelMap = (function () {
  var ret = {};
  //ret[sourceNames.cpu] = "cpu";
  ret[sourceNames.mem] = "mem";
#+end_src

Comment out or remove line 70-74
#+begin_src js
  var formatters = {

    // "cpu": function (data) {
    //   var value = helpers.checkedValueStr(data["value"], '0');
    //   var paddedValue = helpers.padStrLeft(value, ' ', 3);
    //   return  paddedValue + data["units"];
    // },

  "mem": function(data) {
#+end_src

Comment out or remove line 164-169:
#+begin_src js
  var updateLabels = function (labels, name, sourceData) {
      ...
      // // cpu
      // if (label === "cpu") {
      //   var formatter = formatters[label];
      //   labels[label].text = formatter({ value: parseInt(sourceData["value"]),
      //                                     units: sourceData["units"] });
      // }
      //
      // else
      // mem
      if (label === "mem") {
#+end_src

The sad result
#+caption: Without cpu :(
[[file:images/textmon-0.1/without_cpu.png]]

The steps to remove the /mem/ entry are analogous.

* Removing  wlan or sda
We will remove /wlan/ here.  The steps to remove the /sda/ entry are analogous.

Comment out or remove line 23-24
#+begin_src js
  var sourceNames = (function () {
    var ret = {}

    ret["cpu"] = "cpu/system/TotalLoad";
    ret["mem"] = "mem/physical/application";
    // ret["wlanDown"] = "network/interfaces/wlan0/receiver/data";
    // ret["wlanUp"] = "network/interfaces/wlan0/transmitter/data";
#+end_src

Remove "wlan" from line 35
#+begin_src js
  var labelNames = ["cpu", "mem", "sda"];
#+end_src

Comment out or remove line 43-44
#+begin_src js
var sourceLabelMap = (function () {
  var ret = {};
  ret[sourceNames.cpu] = "cpu";
  ret[sourceNames.mem] = "mem";
  // ret[sourceNames.wlanDown] = "wlan";
  // ret[sourceNames.wlanUp] = "wlan";
#+end_src

Comment out or remove line 54-57
#+begin_src js
  var dataCache = {
    // "wlan" : {
    //   up:   {value: "----", units: "KB/s"},
    //   down: {value: "----", units: "KB/s"}
    // },

    "sda" : {
#+end_src

Comment out or remove line 82-95
#+begin_src js
  var formatters = {
    ...
    // "wlan": function (downData, upData) {
    //   var ret;

    //   var value = helpers.checkedValueStr(downData["value"], '0');
    //   var paddedValue = helpers.padStrLeft(value, ' ', 4);
    //   ret = paddedValue + downData["units"] + " d";

    //   ret += "|";

    //   var value = helpers.checkedValueStr(upData["value"], '0');
    //   var paddedValue = helpers.padStrLeft(value, ' ', 4);
    //   ret += paddedValue + upData["units"] + " u";
    //   return ret;
    // },

    "sda": function (readData, writeData) {
#+end_src

Comment out or remove line 192-207
#+begin_src js
  var updateLabels = function (labels, name, sourceData) {
    ...
      labels[label].text = formatter(data["read"], data["write"]);
    }
    // // wlan
    // else if (label === "wlan") {
    //   var data = dataCache[label];
    //   if (name === sourceNames.wlanDown) {
    //     data["down"] = { value: sourceData["value"],
    //                      units: sourceData["units"] };
    //   }
    //   else if (name === sourceNames.wlanUp) {
    //     data["up"] = { value: sourceData["value"],
    //                    units: sourceData["units"] };
    //   }
    //   dataCache[label] = data;

    //   var formatter = formatters[label];
    //   labels[label].text = formatter(data["down"], data["up"]);
    // }
  };
#+end_src

The result
#+caption: Without wlan
[[file:images/textmon-0.1/without_wlan.png]]

* COMMENT Adding a new source                                          :todo:
nil

* Two applets with different settings
Next you'll see why the plasma configuration facility makes a lot of sense,
because we won't use it :P

To have two textmon applets with different configurations, we actually have to
create an new applet from the existing one.

Lets say we want a flavor for the desktop rather than a panel where the font is
bigger.  Do
 : % cp $(kde4-config --localprefix)/share/apps/plasma/plasmoids/textmon ~/textmon_desktop -r
 : cd ~/textmon_desktop
The path =~/textmon_desktop= is arbitrary, copy it whatever you want to.  Edit
the name of the applet in =metadata.desktop=
#+begin_src conf
  [Desktop Entry]
  ...
  Name=TextMon desktop
  ...
  X-KDE-PluginInfo-Name=textmon-desktop
  ...
#+end_src
Do your changes in =main.js=, test them with /plasmoidviewer/ and install the
applet
 : % plasmapkg -i .

This isn't too bad, but you can clearly see why a per applet instance
configuration makes a lot of sense.
