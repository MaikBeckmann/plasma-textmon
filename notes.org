* Javascript
** Installation
In ~$HOME/.kde4/share/apps/plasma/plasmoids~
 : ln -s ~/Projekte/kde/plasmoids/my_plasmoid my_plasmoid
 : kbuildsycoca4

** Running
 : plasmoidviewer my_plasmoid

** API
 - http://techbase.kde.org/Development/Tutorials/Plasma/JavaScript/API

** Snippets
*** Print the name for each object element
#+begin_src js
  function print_element_names(obj) {
    for(var e in obj) {
      print(e + ":");
    }
  }
#+end_src

*** Globally available functions/variables
#+begin_src js
  print_element_names(this)
#+end_src

#+begin_example
print:
gc:
version:
__plasma_scriptenv:
debug:
animation:
AnimationGroup:
ParallelAnimationGroup:
__plasma_package:
i18n:
i18nc:
i18np:
i18ncp:
dataEngine:
service:
loadService:
plasmoid:
startupArguments:
Planar:
MediaCenter:
Horizontal:
Vertical:
Floating:
Desktop:
FullScreen:
TopEdge:
BottomEdge:
LeftEdge:
RightEdge:
InvalidAspectRatioMode:
IgnoreAspectRatio:
KeepAspectRatio:
Square:
ConstrainedSquare:
FixedSize:
UnknownStatus:
PassiveStatus:
ActiveStatus:
NeedsAttentionStatus:
AcceptingInputStatus:
QtNoModifier:
QtShiftModifier:
QtControlModifier:
QtAltModifier:
QtMetaModifier:
QtHorizontal:
QtVertical:
QtAnchorLeft:
QtAnchorRight:
QtAnchorBottom:
QtAnchorTop:
QtAnchorHorizontalCenter:
QtAnchorVerticalCenter:
QtTopLeftCorner:
QtTopRightCorner:
QtBottomLeftCorner:
QtBottomRightCorner:
QSizePolicyFixed:
QSizePolicyMinimum:
QSizePolicyMaximum:
QSizePolicyPreferred:
QSizePolicyExpanding:
QSizePolicyMinimumExpanding:
QSizePolicyIgnored:
NoBackground:
StandardBackground:
TranslucentBackground:
DefaultBackground:
TextColor:
HighlightColor:
BackgroundColor:
ButtonTextColor:
ButtonBackgroundColor:
LinkColor:
VisitedLinkColor:
QtAlignLeft:
QtAlignRight:
QtAlignHCenter:
QtAlignJustify:
QtAlignTop:
QtAlignBottom:
QtAlignVCenter:
QtNoButton:
QtLeftButton:
QtRightButton:
QtMidButton:
QtXButton1:
QtXButton2:
AnimationForward:
AnimationBackward:
NoAlignment:
AlignToMinute:
AlignToHour:
loadui:
QPainter:
QGraphicsItem:
QIcon:
QTimer:
QFont:
QColor:
QEasingCurve:
QRectF:
QPen:
QPixmap:
QSizeF:
QSizePolicy:
QPoint:
LinearLayout:
GridLayout:
AnchorLayout:
ByteArray:
Url:
PlasmaSvg:
PlasmaFrameSvg:
Svg:
FrameSvg:
ExtenderItem:
SpinBox:
TreeView:
WebView:
Meter:
GroupBox:
TabBar:
LineEdit:
Frame:
TextEdit:
SignalPlotter:
CheckBox:
Separator:
FlashingLabel:
Label:
SvgWidget:
BusyWidget:
ItemBackground:
ToolButton:
ScrollWidget:
ScrollBar:
VideoWidget:
GraphicsWidget:
ComboBox:
Slider:
IconWidget:
PushButton:
RadioButton:
#+end_example

*** Functions/variables in =plasmoid=
#+begin_src js
  print_element_names(plasmoid)
#+end_src

#+begin_example
objectName:
aspectRatioMode:
formFactor:
location:
currentActivity:
shouldConserveResources:
activeConfig:
busy:
backgroundHints:
immutable:
userConfiguring:
apiVersion:
status:
rect:
size:
associatedApplication:
layout:
sender:
destroyed(QObject*):
destroyed():
releaseVisualFocus():
configNeedsSaving():
formFactorChanged():
locationChanged():
contextChanged():
immutableChanged():
statusChanged():
gc():
formFactor():
aspectRatioMode():
setAspectRatioMode(AspectRatioMode):
setFailedToLaunch(bool,QString):
setFailedToLaunch(bool):
isBusy():
setBusy(bool):
backgroundHints():
setBackgroundHints(BackgroundHints):
setConfigurationRequired(bool,QString):
setConfigurationRequired(bool):
size():
rect():
setActionSeparator(QString):
setAction(QString,QString,QString,QString):
setAction(QString,QString,QString):
setAction(QString,QString):
removeAction(QString):
action(QString):
resize(qreal,qreal):
setMinimumSize(qreal,qreal):
setPreferredSize(qreal,qreal):
activeConfig():
setActiveConfig(QString):
readConfig(QString):
writeConfig(QString,QVariant):
file(QString):
file(QString,QString):
include(QString):
debug(QString):
findChild(QString):
extender():
downloadedFiles():
update(QRectF):
update():
listAddons:
loadAddon:
addEventListener:
removeEventListener:
hasExtension:
__qt_scope__:
#+end_example
** Open questions
*** Clone
There just has to be a function that lets one write this
#+begin_src js
  var separator = function(sepStr, styleSheet) {
    var l = new Label();
    l.text = sepStr;
  
    if(styleSheet) {
      l.styleSheet = styleSheet;
    }
  
    return l;
  }
  var styleSheet = labels.cpu.styleSheet;
  //
  layout.addItem(labels.cpu);
  layout.addItem(labels.mem);
  layout.addItem(separator("|", styleSheet));
  layout.addItem(labels.wlan);
  layout.addItem(separator("|", styleSheet));
  layout.addItem(labels.hdd);
#+end_src
like this instead
#+begin_src js
  var sep = new Label();
  sep.text = "|";
  sep.styleSheet = labels.cpu.styleSheet
  //
  layout.addItem(labels.cpu);
  layout.addItem(labels.mem);
  layout.addItem(clone(sep));
  layout.addItem(labels.wlan);
  layout.addItem(clone(sep));
  layout.addItem(labels.hdd);
#+end_src


* textmon
** Settings text
Configuration is done by getting your hands covered in code >:]

 1. Change to the dir which contains the user installed plasmoids
     : $ cd $(kde4-config --localprefix)/share/apps/plasma/plasmoids

 2. In there is our textmon dir.  Change to the dir which contains the applet
    implementation
     : $ cd textmon/contents/code

 3. Edit main.js and internals.js

 4. Test via
     : $ plasmoidviewer textmon
    If you're happy with your changes, proceed.  Otherwise return to 3.

 5. Restart plasma-desktop to have your changes effect the applet
     : $ kquitapp plasma-desktop
     : $ plasma-desktop

Additional tip:  If kquitapp plasma-desktop doesn't work, use 
 : $ killall plasma-desktop
instead.
