* Agenda
** Initialization bug
Explain with 
 - plasmapkg -u .
 - Add Widget -> MyApplet
cycle.

 1. Mention that sourceAdded isn't called
 2. How to fix it
 3. Ask if sourceAdded is even needed
 4. Explain the silent dataUpdated problem
 5. How to catch it

Restarting plasma-desktop and even more important using plasmoidviewer hides
 1. missing dataUpdated bug
 2. that sourceAdded might not be called


* Javascript
** Installation
In ~$HOME/.kde4/share/apps/plasma/plasmoids~
 : ln -s ~/Projekte/kde/plasmoids/my_plasmoid my_plasmoid
 : kbuildsycoca4

** Running
 : plasmoidviewer my_plasmoid

** API
 - http://techbase.kde.org/Development/Tutorials/Plasma/JavaScript/API

** Snippets
*** Print the name for each object element
#+begin_src js
  function print_element_names(obj) {
    for(var e in obj) {
      print(e + ":");
    }
  }
#+end_src

*** Globally available functions/variables
#+begin_src js
  print_element_names(this)
#+end_src

#+begin_example
print:
gc:
version:
__plasma_scriptenv:
debug:
animation:
AnimationGroup:
ParallelAnimationGroup:
__plasma_package:
i18n:
i18nc:
i18np:
i18ncp:
dataEngine:
service:
loadService:
plasmoid:
startupArguments:
Planar:
MediaCenter:
Horizontal:
Vertical:
Floating:
Desktop:
FullScreen:
TopEdge:
BottomEdge:
LeftEdge:
RightEdge:
InvalidAspectRatioMode:
IgnoreAspectRatio:
KeepAspectRatio:
Square:
ConstrainedSquare:
FixedSize:
UnknownStatus:
PassiveStatus:
ActiveStatus:
NeedsAttentionStatus:
AcceptingInputStatus:
QtNoModifier:
QtShiftModifier:
QtControlModifier:
QtAltModifier:
QtMetaModifier:
QtHorizontal:
QtVertical:
QtAnchorLeft:
QtAnchorRight:
QtAnchorBottom:
QtAnchorTop:
QtAnchorHorizontalCenter:
QtAnchorVerticalCenter:
QtTopLeftCorner:
QtTopRightCorner:
QtBottomLeftCorner:
QtBottomRightCorner:
QSizePolicyFixed:
QSizePolicyMinimum:
QSizePolicyMaximum:
QSizePolicyPreferred:
QSizePolicyExpanding:
QSizePolicyMinimumExpanding:
QSizePolicyIgnored:
NoBackground:
StandardBackground:
TranslucentBackground:
DefaultBackground:
TextColor:
HighlightColor:
BackgroundColor:
ButtonTextColor:
ButtonBackgroundColor:
LinkColor:
VisitedLinkColor:
QtAlignLeft:
QtAlignRight:
QtAlignHCenter:
QtAlignJustify:
QtAlignTop:
QtAlignBottom:
QtAlignVCenter:
QtNoButton:
QtLeftButton:
QtRightButton:
QtMidButton:
QtXButton1:
QtXButton2:
AnimationForward:
AnimationBackward:
NoAlignment:
AlignToMinute:
AlignToHour:
loadui:
QPainter:
QGraphicsItem:
QIcon:
QTimer:
QFont:
QColor:
QEasingCurve:
QRectF:
QPen:
QPixmap:
QSizeF:
QSizePolicy:
QPoint:
LinearLayout:
GridLayout:
AnchorLayout:
ByteArray:
Url:
PlasmaSvg:
PlasmaFrameSvg:
Svg:
FrameSvg:
ExtenderItem:
SpinBox:
TreeView:
WebView:
Meter:
GroupBox:
TabBar:
LineEdit:
Frame:
TextEdit:
SignalPlotter:
CheckBox:
Separator:
FlashingLabel:
Label:
SvgWidget:
BusyWidget:
ItemBackground:
ToolButton:
ScrollWidget:
ScrollBar:
VideoWidget:
GraphicsWidget:
ComboBox:
Slider:
IconWidget:
PushButton:
RadioButton:
#+end_example

*** Functions/variables in =plasmoid=
#+begin_src js
  print_element_names(plasmoid)
#+end_src

#+begin_example
objectName:
aspectRatioMode:
formFactor:
location:
currentActivity:
shouldConserveResources:
activeConfig:
busy:
backgroundHints:
immutable:
userConfiguring:
apiVersion:
status:
rect:
size:
associatedApplication:
layout:
sender:
destroyed(QObject*):
destroyed():
releaseVisualFocus():
configNeedsSaving():
formFactorChanged():
locationChanged():
contextChanged():
immutableChanged():
statusChanged():
gc():
formFactor():
aspectRatioMode():
setAspectRatioMode(AspectRatioMode):
setFailedToLaunch(bool,QString):
setFailedToLaunch(bool):
isBusy():
setBusy(bool):
backgroundHints():
setBackgroundHints(BackgroundHints):
setConfigurationRequired(bool,QString):
setConfigurationRequired(bool):
size():
rect():
setActionSeparator(QString):
setAction(QString,QString,QString,QString):
setAction(QString,QString,QString):
setAction(QString,QString):
removeAction(QString):
action(QString):
resize(qreal,qreal):
setMinimumSize(qreal,qreal):
setPreferredSize(qreal,qreal):
activeConfig():
setActiveConfig(QString):
readConfig(QString):
writeConfig(QString,QVariant):
file(QString):
file(QString,QString):
include(QString):
debug(QString):
findChild(QString):
extender():
downloadedFiles():
update(QRectF):
update():
listAddons:
loadAddon:
addEventListener:
removeEventListener:
hasExtension:
__qt_scope__:
#+end_example
*** Functions/variables in ~dataengine("systemmonitor")~
 : objectName:
 : sources:
 : valid:
 : icon:
 : name:
 : destroyed(QObject*):
 : destroyed():
 : deleteLater():
 : sourceAdded(QString):
 : sourceRemoved(QString):
 : scheduleSourcesUpdated():
 : removeSource(QString):
 : updateAllSources():
 : forceImmediateUpdateOfAllVisualizations():
 : serviceForSource(QString):
 : connectSource(QString,QObject*,uint,Plasma::IntervalAlignment):
 : connectSource(QString,QObject*,uint):
 : connectSource(QString,QObject*):
 : connectAllSources(QObject*,uint,Plasma::IntervalAlignment):
 : connectAllSources(QObject*,uint):
 : connectAllSources(QObject*):
 : disconnectSource(QString,QObject*):
 : containerForSource(QString):
 : query(QString):
 : createDefaultService(QObject*):
 : createDefaultService():
 : updateSensors():
 : updateMonitorsList():

** Open questions
*** Clone
There just has to be a function that lets one write this
#+begin_src js
  var separator = function(sepStr, styleSheet) {
    var l = new Label();
    l.text = sepStr;
  
    if(styleSheet) {
      l.styleSheet = styleSheet;
    }
  
    return l;
  }
  var styleSheet = labels.cpu.styleSheet;
  //
  layout.addItem(labels.cpu);
  layout.addItem(labels.mem);
  layout.addItem(separator("|", styleSheet));
  layout.addItem(labels.wlan);
  layout.addItem(separator("|", styleSheet));
  layout.addItem(labels.hdd);
#+end_src
like this instead
#+begin_src js
  var sep = new Label();
  sep.text = "|";
  sep.styleSheet = labels.cpu.styleSheet
  //
  layout.addItem(labels.cpu);
  layout.addItem(labels.mem);
  layout.addItem(clone(sep));
  layout.addItem(labels.wlan);
  layout.addItem(clone(sep));
  layout.addItem(labels.hdd);
#+end_src

*** How to quit?
How to quit the execution of an Javascript applet.  'throw' doesn't.
** snippets
#+begin_src js
  ss = {color:"red", fonsize: 10};
  str = ""
  for(var k in ss) {
    str = str + k + ":" + ss[k] + ";\n";
  }
  print(str);
  
#+end_src

#+RESULTS:
: color:red;
: fonsize:10;
: 
: undefined



#+begin_src js
  var helpers  = (function() {
  
    var exports = {
  
      concatToString: function(list, term) {
        var ret = "";
        for(var i = 0; i < list.length;  i++) {
          ret = ret + list[i] + term;
        }
        return ret;
      }
  
    };
  
    return exports;
  })();
   
  
  var styles = [ "font-family: Liberation Mono;",
                 "font-style: normal;",
                 "font-size: 10px;",
                 "color: white;" ];
  
  var styleSheet = helpers.concatToString(styles, "\n");

  return styleSheet;
#+end_src

#+RESULTS:
: font-family: Liberation Mono;
: font-style: normal;
: font-size: 10px;
: color: white;
: 

#+begin_src js
  var helpers  = (function() {  
  
    var concatToString = function(list, term) {
      var ret = "";
      for(var i = 0; i < list.length;  i++) {
        ret = ret + list[i] + term;
      }
      return ret;
    };
  
    var styleSheetToString = function(styleSheet) {
      var lines = []
      for(var k in styleSheet) {
        lines.push("" + k + ": " + styles[k] + ";");
      }
      return concatToString(lines, "\n");
    };
      
    var exports = {
      concatToString: concatToString,
      styleSheetToString: styleSheetToString
    };
  
    return exports;
  })();
  
  var styles = { "font-family": "Liberation Mono",
                 "font-style": "normal",
                 "font-size": "10px",
                 "color": "white" };

  return helpers.styleSheetToString(styles);
#+end_src

#+RESULTS:
: font-family: Liberation Mono;
: font-style: normal;
: font-size: 10px;
: color: white;
: 

* textmon
** Update persistent Data
The data engine emits new data points over time.  It does so for each
subscriped source at a time.  There are labels that display data from more than
one source.  May L be such an label and N_1,..., N_n its sources.  If a new
value for N_k is emitted by the data engine the text in L has to be newly
computed.  For that the values N_i with i != k have to be available.  Hence
they have to be stored between source updates.



** Settings text
Configuration is done by getting your hands covered in code >:]

 1. Change to the dir which contains the user installed plasmoids
     : $ cd $(kde4-config --localprefix)/share/apps/plasma/plasmoids

 2. In there is our textmon dir.  Change to the dir which contains the applet
    implementation
     : $ cd textmon/contents/code

 3. Edit main.js

 4. Test via
     : $ plasmoidviewer textmon
    If you're happy with your changes, proceed.  Otherwise return to 3.

 5. Restart plasma-desktop to have your changes effect the applet
     : $ kquitapp plasma-desktop
     : $ plasma-desktop

Additional tip:  If kquitapp plasma-desktop doesn't work, use 
 : $ killall plasma-desktop
instead.
* Tutorial
** Introduction
*** Where we start
*** Where we want to get to
** Javascript
*** Commandline js
*** Hello World
#+begin_src js
  print("hello world");
#+end_src

#+RESULTS:
: hello world

*** Defining a function
#+begin_src js
  function myfunc() {
    return 42;
  }
  print(myfunc();
#+end_src

#+RESULTS:
: 42

*** Local and global variables
#+begin_src js
  x = 1
  function myfunc() {
    x = 2
  }
  myfunc();
  print(x);
#+end_src

#+RESULTS:
: 2
: undefined


#+begin_src js
  x = 1
  function myfunc() {
    var x = 2
  }
  myfunc();
  print(x);
#+end_src

#+RESULTS:
: 1

*** The for loop
#+begin_src js
  function myfunc() {
    for(i = 0; i < 5; i++) {
      print(i);
    }
  }
  
  myfunc();
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 3
: 4

#+begin_src js
  i = -1;
  function myfunc() {
    for(i = 0; i < 5; i++) {
      print(i);
    }
  }
  
  myfunc();
  print("---");
  print(i);
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 3
: 4
: ---
: 5


#+begin_src js
  i = -1;
  function myfunc() {
    for(var i = 0; i < 5; i++) {
      print(i);
    }
  }
  
  myfunc();
  print("---");
  print(i);
#+end_src

#+RESULTS:
: 0
: 1
: 2
: 3
: 4
: ---
: -1

*** Array
nil

*** Associative Array
nil

*** The for each loop
nil

** Hello World

*** print on console
=metadata.desktop=
#+begin_src conf :tangle textmon_tut/hello_world/metadata.desktop
  [Desktop Entry]
  Type=Service   
  X-Plasma-API=javascript
  X-Plasma-MainScript=code/main.js
#+end_src

=content/code/main.js=
#+begin_src js :tangle textmon_tut/hello_world/contents/code/main.js
  print("hello world");
#+end_src
*** Text on widget

 - http://techbase.kde.org/Development/Tutorials/Plasma/JavaScript/GettingStarted

** Hello CPU
*** Find the source
 1. Start
  : $ plasmaengineexplorer

 2. Select =systemmonitor=

 3. Expand the entry =cpu/system/TotalLoad=
 

*** Print values on the console
*** Quirks of systemmonitor
*** Display value
*** Model View Controller
*** Installing the applet
** Adding a memory view
** Fixed width strings
** Adding wlan
** Adding sda
** Javascript modules
* CMake/C++ tricks
** Show preprocessor macros
*** GCC
From the gcc manpage:

 :      -dCHARS
 :          CHARS is a sequence of one or more of the following
 :          characters, and must not be preceded by a space.  Other
 :          characters are interpreted by the compiler proper, or
 :          reserved for future versions of GCC, and so are silently
 :          ignored.  If you specify characters whose behavior
 :          conflicts, the result is undefined.
 : 
 :          M   Instead of the normal output, generate a list of
 :              #define directives for all the macros defined during
 :              the execution of the preprocessor, including
 :              predefined macros.  This gives you a way of finding
 :              out what is predefined in your version of the
 :              preprocessor.  Assuming you have no file foo.h, the
 :              command
 : 
 :                      touch foo.h; cpp -dM foo.h
 : 
 :              will show all the predefined macros.
 : 
 :              If you use -dM without the -E option, -dM is
 :              interpreted as a synonym for -fdump-rtl-mach.
 :
 :     ...

*** CMake
Enter the build directory and have cmake preprocess the source file
 : $ VERBOSE=1 make some_source.i
Then copy the command this spit out, paste it and append =-dM=.  Now
 : some_source.i
contains the definition of each defined macros.
* Bug reports
** Initialization bug
*** Enumeration of Problems starting from the given example
**** sourceAdded not called.
**** How to fix it (omitting sourceAdded altogether)
**** Now dataUpdated isn't called.
**** Why this is and how to fix it.
**** Why I didn't catch the sourceAdded problem with plasmoidviewer
*** File problem to plasma-devel
   - Visualize problem with 
     - http://wstaw.org/m/2012/02/08/plasma-desktopZ29288.png
   - Reduced code in =textmondebug=
   - Visualize with
    - http://wstaw.org/m/2012/02/08/plasma-desktopl30563.png

***** EMail

Hello,

Forever ago when I switched (back) from the awesome window manager to KDE I've
done a textual system monitor applet in javascript, which shows the most
important system parameters (cpu, memory, network, hdd).  I've cleaned the
source up and decided it might of interested to others, but there is an issue I
wasn't able to solve yet: When the applet is added to the desktop or panel,
then the "systemmonitor" doesn't respond.  Only when the plasma-desktop process
is restarted, it starts working.

The following screenshot visualizes the effect.
 - http://wstaw.org/m/2012/02/08/plasma-desktopZ29288.png
In there two applet instances are shown.  The one on top was added followed by
 : kquitapp plasma-desktop
 : plasma-desktop
The one beneath was just added without restarting plasma.

The code in this paste is a condenced version that reproduces the problem
 - http://paste.kde.org/205478/
(and the matching metadata.desktop http://paste.kde.org/205490/ ).  Here a
screenshot that is the equivalent to the one above for the complete applet
 - http://wstaw.org/m/2012/02/08/plasma-desktopl30563.png
Note the problem doesn't occur with plasmoidviewer, only with the actually
running plasma-desktop.


My question: Is this a bug or am I doing something wrong?


Best,
Maik

*** Code same thing in other languages
***** C++
nil

***** Python
nil


*** Explanation email to plasma-devel

I figured the problem(s) out. Here it goes..

Here source code from the initial email without the print statements.
#+begin_src js
    var layout = new LinearLayout(plasmoid);
    l =  new Label();
    l.text = "---";
    layout.addItem(l);     
     
    var smDataEngine = dataEngine("systemmonitor")

    smDataEngine.sourceAdded.connect(function(name) {
      if (name.toString() == "cpu/system/TotalLoad") {
        smDataEngine.connectSource(name, plasmoid, 1000);
    });     
     
    plasmoid.dataUpdated = function(name, d) {
      if ( d["value"] ) {
        l.text = d["value"];
      }
    };
#+end_src
There are three bugs in there, where the first hides the remaining two.

The first bug is that sourceAdded isn't called when the applet is added to a
running plasma-desktop session.  If you'd restart plasma-deskop, then it works
as advertised.  I assume that the the process loads all applet and then starts
the data engines, which then causes the sourceAdded slot to be called.  Adding
a new applet ofc doesn't restart the data engines and there we have it.  Note
that for the same reason this bug doesn't show up when you're using
plasmoidviewer (which is why it took me a while to figure it out).

Now lets change the source code to work around this problem.  I'll get rid of
sourceAdded altogether, since it's unlikely that the CPU will be plugged out at
runtime.
#+begin_src js
    var layout = new LinearLayout(plasmoid);
    l =  new Label();
    l.text = "---";
    layout.addItem(l);     
     
    var smDataEngine = dataEngine("systemmonitor")

    smDataEngine.connectSource("cpu/system/TotalLoad", plasmoid, 1000);
     
    plasmoid.dataUpdated = function(name, d) {
      if ( d["value"] ) {
        l.text = d["value"];
      }
    };
#+end_src
This reliably _never_ works, because the second bug kicks in.  When
connetSource is called the updateData slot isn't filled yet.  This causes
connetSource to fail.  This failure doesn't cause an debug message to be
emitted (which is good IMO), but connectSource returns 'undefined' rather than
'true'. So the two remaining bugs are:
 1. 'plasmoid.dataUpdated = ..' isn't located before
    'smDataEngine.connectSource(..)' in the source file.
 2. The return value of connectSource isn't checked.

Here the final and hopefully correct version
#+begin_src js
  var layout = new LinearLayout(plasmoid);
  l =  new Label();
  l.text = "---";
  layout.addItem(l);     
    
  plasmoid.dataUpdated = function(name, d) {
    if ( d["value"] ) {
      l.text = d["value"];
    }
  };
  
  var smDataEngine = dataEngine("systemmonitor");
  if (!smDataEngine.connectSource("cpu/system/TotalLoad", plasmoid, 1000)) {
    throw("connecting to data source failed.");
  }   
#+end_src


Thanks for your attention, 
Maik

* People
** KDE Javascript exports
 - aseige
 - notmart
